df_ind_coeff %>% filter(Coeff == "X1")
2.05 - 0.689
# state levels
df_ind_coeff<-tibble(LI=ind_coeff[1,,2],
Median=ind_coeff[2,,2],
HI=ind_coeff[3,,2])
df_ind_coeff$state <- rep(unique(levels(covid_confirmed$state)), 2)
df_ind_coeff$state <- rep(unique(levels(covid_confirmed$state)))
df_ind_coeff <- df_ind_coeff %>%
filter(Hi - LO < 0.5)
df_ind_coeff <- df_ind_coeff %>%
filter(HI - LO < 0.5)
abs(5 - 6)
df_ind_coeff <- df_ind_coeff %>%
filter(abs(HI - LI) < 0.5)
# Plotting Rs
df_ind_coeff %>%
filter(Coeff == "X1") %>%
ggplot(aes(x=state,y=Median))+
geom_point() +
geom_linerange(aes(ymin=LI,ymax=HI)) +
geom_hline(data=pop_lvl[pop_lvl$Coeff == "X1",],
aes(yintercept=Median),
color="blue",linetype="dashed")+
labs(title = "R0 by State",
y = "Estimated R0",
x = "State",
caption = "Source: https://api.covid19india.org/") +
theme(plot.caption = element_text(color = "grey",
face = "italic",
hjust = 0))
# Plotting Rs
df_ind_coeff %>%
ggplot(aes(x=state,y=Median))+
geom_point() +
geom_linerange(aes(ymin=LI,ymax=HI)) +
geom_hline(data=pop_lvl[pop_lvl$Coeff == "X1",],
aes(yintercept=Median),
color="blue",linetype="dashed")+
labs(title = "R0 by State",
y = "Estimated R0",
x = "State",
caption = "Source: https://api.covid19india.org/") +
theme(plot.caption = element_text(color = "grey",
face = "italic",
hjust = 0))
# Plotting Rs
df_ind_coeff %>%
arrange(Median) %>%
ggplot(aes(x=state,y=Median))+
geom_point() +
geom_linerange(aes(ymin=LI,ymax=HI)) +
geom_hline(data=pop_lvl[pop_lvl$Coeff == "X1",],
aes(yintercept=Median),
color="blue",linetype="dashed")+
labs(title = "R0 by State",
y = "Estimated R0",
x = "State",
caption = "Source: https://api.covid19india.org/") +
theme(plot.caption = element_text(color = "grey",
face = "italic",
hjust = 0))
# Plotting Rs
df_ind_coeff %>%
arrange(Median) %>%
ggplot(aes(x=state,y=Median))+
geom_point() +
geom_linerange(aes(ymin=LI,ymax=HI)) +
geom_hline(data=pop_lvl[pop_lvl$Coeff == "X1",],
aes(yintercept=Median),
color="blue",linetype="dashed") +
coord_flip() +
labs(title = "R0 by State",
y = "Estimated R0",
x = "State",
caption = "Source: https://api.covid19india.org/") +
theme(plot.caption = element_text(color = "grey",
face = "italic",
hjust = 0))
# reordering based on R0 size
df_ind_coeff$state <- transform(df_ind_coeff$state,
variable=reorder(df_ind_coeff$state,
-df_ind_coeff$Median ) )
# Plotting Rs
df_ind_coeff %>%
arrange(Median) %>%
ggplot(aes(x=state,y=Median))+
geom_point() +
geom_linerange(aes(ymin=LI,ymax=HI)) +
geom_hline(data=pop_lvl[pop_lvl$Coeff == "X1",],
aes(yintercept=Median),
color="blue",linetype="dashed") +
coord_flip() +
labs(title = "R0 by State",
y = "Estimated R0",
x = "State",
caption = "Source: https://api.covid19india.org/") +
theme(plot.caption = element_text(color = "grey",
face = "italic",
hjust = 0))
ggsave("./covid_india/r0_bysate.pdf",
height = 6, width = 9)
df_ind_coeff
# state levels
df_ind_coeff<-tibble(LI=ind_coeff[1,,2],
Median=ind_coeff[2,,2],
HI=ind_coeff[3,,2])
df_ind_coeff$state <- rep(unique(levels(covid_confirmed$state)))
df_ind_coeff <- df_ind_coeff %>%
filter(abs(HI - LI) < 0.5)
# population level
pop_lvl<-tibble(Coeff=c("(Int)","X1"),
Median=apply(mcmc_hier$r,2,quantile,probs=0.5))
df_ind_coeff
# reordering based on R0 size
df_ind_coeff$state <- transform(df_ind_coeff$state,
variable=reorder(df_ind_coeff$state,
-df_ind_coeff$Median ) )
df_ind_coeff
# reordering based on R0 size
df_ind_coeff$state_ro <- transform(df_ind_coeff$state,
state_ro=reorder(df_ind_coeff$state,
-df_ind_coeff$Median ) )
mcmc_hier<-extract(m_hier)
ind_coeff<-apply(mcmc_hier$beta,c(2,3),quantile,probs=c(0.025,0.5,0.975))
# state levels
df_ind_coeff<-tibble(LI=ind_coeff[1,,2],
Median=ind_coeff[2,,2],
HI=ind_coeff[3,,2])
df_ind_coeff$state <- rep(unique(levels(covid_confirmed$state)))
df_ind_coeff <- df_ind_coeff %>%
filter(abs(HI - LI) < 0.5)
# population level
pop_lvl<-tibble(Coeff=c("(Int)","X1"),
Median=apply(mcmc_hier$r,2,quantile,probs=0.5))
transform(df_ind_coeff$state,
state_ro=reorder(df_ind_coeff$state,
-df_ind_coeff$Median ) )
# reordering based on R0 size
transform(df_ind_coeff$state,
state_ro=reorder(df_ind_coeff$state,
-df_ind_coeff$Median))$state_ro
# reordering based on R0 size
df_ind_coeff$state_ro <- transform(df_ind_coeff$state,
state_ro=reorder(df_ind_coeff$state,
-df_ind_coeff$Median))$state_ro
# Plotting Rs
df_ind_coeff %>%
arrange(Median) %>%
ggplot(aes(x=state_ro,y=Median))+
geom_point() +
geom_linerange(aes(ymin=LI,ymax=HI)) +
geom_hline(data=pop_lvl[pop_lvl$Coeff == "X1",],
aes(yintercept=Median),
color="blue",linetype="dashed") +
coord_flip() +
labs(title = "R0 by State",
y = "Estimated R0",
x = "State",
caption = "Source: https://api.covid19india.org/") +
theme(plot.caption = element_text(color = "grey",
face = "italic",
hjust = 0))
ggsave("./covid_india/r0_bysate.pdf",
height = 6, width = 9)
covid %>%
filter(status == "Confirmed" &
state %in% c("MH", "GJ", "DL")) %>%
ggplot() +
geom_line(aes(date, value_cumsum, color = state)) +
labs(title = "Time Series Cumulative Sum by State",
x = "",
y = "Total Confirmed",
color = "State",
caption = "Source: https://api.covid19india.org/") +
theme(plot.caption = element_text(color = "grey", face = "italic",
hjust = 0))
covid %>%
filter(status == "Confirmed" &
state %in% c("MH", "GJ", "KL")) %>%
ggplot() +
geom_line(aes(date, value_cumsum, color = state)) +
labs(title = "Time Series Cumulative Sum by State",
x = "",
y = "Total Confirmed",
color = "State",
caption = "Source: https://api.covid19india.org/") +
theme(plot.caption = element_text(color = "grey", face = "italic",
hjust = 0))
?lm
covid_confirmed
lm("value_cumsum ~ F5.value_cumsum", data = covid_confirmed[covid_confirmed$state == "MH"])
lm("value_cumsum ~ F5.value_cumsum", data = covid_confirmed[covid_confirmed$state == "MH",])
lm("value_cumsum ~ F5.value_cumsum", data = covid_confirmed[covid_confirmed$state == "GJ",])
lm("value_cumsum ~ F5.value_cumsum", data = covid_confirmed[covid_confirmed$state == "KL",])
ind_coeff<-apply(mcmc_hier$beta,c(2,3),quantile,probs=c(0.025,0.5,0.975))
ind_coeff
unique(levels(covid_confirmed$state))
covid_confirmed$state
# remove India total and keep only confirmed cases
covid_confirmed <- covid %>%
filter(status == "Confirmed" & state != "TT" & state != "UT")
# remove obs with NA
covid_confirmed <- covid_confirmed %>%
drop_na(F5.value_cumsum, F5.value_cumsum)
# Make state categorical
# covid_confirmed <- covid_confirmed %>%
#     mutate(state = as.factor(state))
N <- nrow(covid_confirmed)
J <- length(unique(covid_confirmed$state))
K <- 2 # r coefficient and intercept
id <- c(unclass(covid_confirmed$state))
X <- cbind(rep(1, nrow(covid_confirmed)),covid_confirmed$value_cumsum)
y <- covid_confirmed$F5.value_cumsum
id
c(unclass(covid_confirmed$state))
covid_confirmed$state
covid_confirmed <- covid %>%
filter(status == "Confirmed" & state != "TT" & state != "UT")
# remove obs with NA
covid_confirmed <- covid_confirmed %>%
drop_na(F5.value_cumsum, F5.value_cumsum)
# Make state categorical
covid_confirmed <- covid_confirmed %>%
mutate(state = as.factor(state))
id <- c(unclass(covid_confirmed$state))
id
lm("value_cumsum ~ F5.value_cumsum", data = covid_confirmed[covid_confirmed$state == "MH",])
lm("value_cumsum ~ F5.value_cumsum", data = covid_confirmed[covid_confirmed$state == "MH",]) %>%
summary()
lm("value_cumsum ~ F5.value_cumsum",
data = covid_confirmed[covid_confirmed$state == "GJ",]) %>%
summary()
lm("value_cumsum ~ F5.value_cumsum",
data = covid_confirmed[covid_confirmed$state == "KL",])  %>%
summary()
lm("value_cumsum ~ F5.value_cumsum",
data = covid_confirmed[covid_confirmed$state == "Ap",])  %>%
summary()
lm("value_cumsum ~ F5.value_cumsum",
data = covid_confirmed[covid_confirmed$state == "AP",])  %>%
summary()
m_hier<-stan(file="./covid_india/covid_model.stan",
data=list(N=N,J=J,K=K,id=id,X=X,y=y))
mcmc_hier<-extract(m_hier)
ind_coeff<-apply(mcmc_hier$beta,c(2,3),quantile,probs=c(0.025,0.5,0.975))
# state levels
df_ind_coeff<-tibble(LI=ind_coeff[1,,2],
Median=ind_coeff[2,,2],
HI=ind_coeff[3,,2])
df_ind_coeff$state <- rep(unique(levels(covid_confirmed$state)))
df_ind_coeff <- df_ind_coeff %>%
filter(abs(HI - LI) < 0.5)
# population level
pop_lvl<-tibble(Coeff=c("(Int)","X1"),
Median=apply(mcmc_hier$r,2,quantile,probs=0.5))
# reordering based on R0 size
df_ind_coeff$state_ro <- transform(df_ind_coeff$state,
state_ro=reorder(df_ind_coeff$state,
-df_ind_coeff$Median))$state_ro
# Plotting Rs
df_ind_coeff %>%
arrange(Median) %>%
ggplot(aes(x=state_ro,y=Median))+
geom_point() +
geom_linerange(aes(ymin=LI,ymax=HI)) +
geom_hline(data=pop_lvl[pop_lvl$Coeff == "X1",],
aes(yintercept=Median),
color="blue",linetype="dashed") +
coord_flip() +
labs(title = "R0 by State",
y = "Estimated R0",
x = "State",
caption = "Source: https://api.covid19india.org/") +
theme(plot.caption = element_text(color = "grey",
face = "italic",
hjust = 0))
ggsave("./covid_india/r0_bysate.pdf",
height = 6, width = 9)
m_hier
covid_confirmed %>% View
covid_confirmed %>% arrange(date) %>% View
covid_confirmed %>% arrange(date) %>% filter(state == "MH") %>% View
df_ind_coeff
## Storing Coefficients with Each State
mcmc_hier<-extract(m_hier)
ind_coeff<-apply(mcmc_hier$beta,c(2,3),quantile,probs=c(0.025,0.5,0.975))
# state levels
df_ind_coeff<-tibble(LI=ind_coeff[1,,2],
Median=ind_coeff[2,,2],
HI=ind_coeff[3,,2])
df_ind_coeff$state <- rep(unique(levels(covid_confirmed$state)))
# population level
pop_lvl<-tibble(Coeff=c("(Int)","X1"),
Median=apply(mcmc_hier$r,2,quantile,probs=0.5))
# reordering based on R0 size
df_ind_coeff$state_ro <- transform(df_ind_coeff$state,
state_ro=reorder(df_ind_coeff$state,
-df_ind_coeff$Median))$state_ro
df_ind_coeff
pop_lvl
## Storing Coefficients with Each State
mcmc_hier<-extract(m_hier)
ind_coeff<-apply(mcmc_hier$beta,c(2,3),quantile,probs=c(0.025,0.5,0.975))
# state levels
df_ind_coeff<-tibble(LI=ind_coeff[1,,2],
Median=ind_coeff[2,,2],
HI=ind_coeff[3,,2])
df_ind_coeff$state <- rep(unique(levels(covid_confirmed$state)))
# population level
pop_lvl<-tibble(Coeff=c("(Int)","X1"),
Median=apply(mcmc_hier$r,2,quantile,probs=0.5))
df_ind_coeff
pop_lvl
apply(mcmc_hier$r,2,quantile,probs=c(0.025,0.5,0.975))
# population level
pop_extract <- apply(mcmc_hier$r,2,quantile,probs=c(0.025,0.5,0.975))
pop_extract
pop_extract[1, 2]
pop_lvl<-tibble(LI = pop_extract[1, 2],
Median=pop_extract[2, 2],
HI = pop_extract[3, 2])
pop_level
pop_lvl
pop_lvl<-tibble(LI = pop_extract[1, 2],
Median=pop_extract[2, 2],
HI = pop_extract[3, 2],
state = "Population")
# Appending
coeff_out <- append(df_ind_coeff, pop_lvl)
coeff_out %>% View
# Appending
coeff_out <- bind_rows(df_ind_coeff, pop_lvl)
coeff_out %>% View
# Saving data
coeff_out %>%
write_csv("./covid_india/coeff.csv")
coeffs <- read_csv("./covid_india/coeff.csv")
df_ind_coeff <- coeffs %>%
filter(state != "Population")
pop_coeff <- coeffs %>%
filter(state == "Population")
df_ind_coeff <- df_ind_coeff %>%
filter(abs(HI - LI) < 0.5)
# reording based on R0 size
df_ind_coeff$state_ro <- transform(df_ind_coeff$state,
state_ro=reorder(df_ind_coeff$state,
-df_ind_coeff$Median))$state_ro
df_ind_coeff
# Plotting Rs
df_ind_coeff %>%
arrange(Median) %>%
ggplot(aes(x=state_ro,y=Median))+
geom_point() +
geom_linerange(aes(ymin=LI,ymax=HI)) +
geom_hline(data=pop_coeff[pop_coeff$Coeff == "X1",],
aes(yintercept=Median),
color="blue",linetype="dashed") +
coord_flip() +
labs(title = "R0 by State",
y = "Estimated R0",
x = "State",
caption = "Source: https://api.covid19india.org/") +
theme(plot.caption = element_text(color = "grey",
face = "italic",
hjust = 0))
library(tidyverse)
pop_coeff
# Estiamting hierarchical model for Covid in India
covid <- read_csv("https://api.covid19india.org/csv/latest/state_wise_daily.csv")
# We want to reshape the dataset to long for easy analysis.
covid <- covid %>%
pivot_longer(-c(Date, Status), names_to = "state", values_to = "value") %>%
rename_all(tolower)
# formatting date
covid <- covid %>%
mutate(date = dmy(date))
# calculating total number of cases per day
covid <- covid %>%
arrange(date) %>%
group_by(state, status) %>%
mutate(value_cumsum = cumsum(ifelse(is.na(value), 0, value)))
# specifying outcome variable
covid <- covid %>%
group_by(state, status) %>%
mutate(F5.value_cumsum = lead(value_cumsum, 5, order_by = date)) %>%
ungroup
# Specifying parameter values for stan
# remove India total and keep only confirmed cases
covid_confirmed <- covid %>%
filter(status == "Confirmed" & state != "TT" & state != "UT")
# remove obs with NA
covid_confirmed <- covid_confirmed %>%
drop_na(F5.value_cumsum, F5.value_cumsum)
# Make state categorical
covid_confirmed <- covid_confirmed %>%
mutate(state = as.factor(state))
# Parameters to pass into stan
N <- nrow(covid_confirmed)
J <- length(unique(covid_confirmed$state))
K <- 2 # r coefficient and intercept
id <- c(unclass(covid_confirmed$state))
X <- cbind(rep(1, nrow(covid_confirmed)),covid_confirmed$value_cumsum)
y <- covid_confirmed$F5.value_cumsum
## Running Stan
m_hier<-stan(file="./covid_india/covid_model.stan",
data=list(N=N,J=J,K=K,id=id,X=X,y=y))
## Storing Coefficients with Each State
mcmc_hier<-extract(m_hier)
ind_coeff<-apply(mcmc_hier$beta,c(2,3),quantile,probs=c(0.025,0.5,0.975))
# state levels
df_ind_coeff<-tibble(LI=ind_coeff[1,,2],
Median=ind_coeff[2,,2],
HI=ind_coeff[3,,2])
df_ind_coeff$state <- rep(unique(levels(covid_confirmed$state)))
# population level
pop_extract <- apply(mcmc_hier$r,2,quantile,probs=c(0.025,0.5,0.975))
pop_lvl<-tibble(LI = pop_extract[1, 2],
Median=pop_extract[2, 2],
HI = pop_extract[3, 2],
state = "Population")
# Appending
coeff_out <- bind_rows(df_ind_coeff, pop_lvl)
# Saving data
coeff_out %>%
write_csv("./covid_india/coeff.csv")
pkgbuild::has_build_tools(debug = TRUE)
library(tidyverse)
library(rstan)
options(mc.cores = parallel::detectCores())
rstan_options(auto_write = TRUE)
library(lubridate)
# Estiamting hierarchical model for Covid in India
covid <- read_csv("https://api.covid19india.org/csv/latest/state_wise_daily.csv")
# We want to reshape the dataset to long for easy analysis.
covid <- covid %>%
pivot_longer(-c(Date, Status), names_to = "state", values_to = "value") %>%
rename_all(tolower)
# formatting date
covid <- covid %>%
mutate(date = dmy(date))
# calculating total number of cases per day
covid <- covid %>%
arrange(date) %>%
group_by(state, status) %>%
mutate(value_cumsum = cumsum(ifelse(is.na(value), 0, value)))
# specifying outcome variable
covid <- covid %>%
group_by(state, status) %>%
mutate(F5.value_cumsum = lead(value_cumsum, 5, order_by = date)) %>%
ungroup
# Specifying parameter values for stan
# remove India total and keep only confirmed cases
covid_confirmed <- covid %>%
filter(status == "Confirmed" & state != "TT" & state != "UT")
# remove obs with NA
covid_confirmed <- covid_confirmed %>%
drop_na(F5.value_cumsum, F5.value_cumsum)
# Make state categorical
covid_confirmed <- covid_confirmed %>%
mutate(state = as.factor(state))
# Parameters to pass into stan
N <- nrow(covid_confirmed)
J <- length(unique(covid_confirmed$state))
K <- 2 # r coefficient and intercept
id <- c(unclass(covid_confirmed$state))
X <- cbind(rep(1, nrow(covid_confirmed)),covid_confirmed$value_cumsum)
y <- covid_confirmed$F5.value_cumsum
## Running Stan
m_hier<-stan(file="./covid_india/covid_model.stan",
data=list(N=N,J=J,K=K,id=id,X=X,y=y))
## Storing Coefficients with Each State
mcmc_hier<-extract(m_hier)
ind_coeff<-apply(mcmc_hier$beta,c(2,3),quantile,probs=c(0.025,0.5,0.975))
# state levels
df_ind_coeff<-tibble(LI=ind_coeff[1,,2],
Median=ind_coeff[2,,2],
HI=ind_coeff[3,,2])
df_ind_coeff$state <- rep(unique(levels(covid_confirmed$state)))
# population level
pop_extract <- apply(mcmc_hier$r,2,quantile,probs=c(0.025,0.5,0.975))
pop_lvl<-tibble(LI = pop_extract[1, 2],
Median=pop_extract[2, 2],
HI = pop_extract[3, 2],
state = "Population")
# Appending
coeff_out <- bind_rows(df_ind_coeff, pop_lvl)
# Saving data
coeff_out %>%
write_csv("./covid_india/coeff.csv")
#plotting the posterior distribution for the parameters
post_beta<-As.mcmc.list(m_hier,pars="beta")
plot(post_beta)
post_beta
plot(post_beta)
install.packages("loo")
install.packages("loo")
install.packages("loo")
library(loo)
extract_log_lik(mcmc_hier, parameter_name = "log_lik")
extract_log_lik(m_hier, parameter_name = "log_lik")
install.packages("bayesplot")
stan_plot(m_hier)
str(m_hier)
plot(m_hier)
typeof(m_hier)
m_hier[1]
m_hier
traceplot(m_hier)
plot(m_hier)
plot(m_hiers, pars = c("r"))
plot(m_hier, pars = c("r"))
