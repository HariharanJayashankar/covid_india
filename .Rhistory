select(state, statecode, population) %>%
mutate(state = ifelse(state == "Odisha", "Orissa", state),
statecode = ifelse(statecode == "OD", "OR", statecode))
# Merging testing and population data
testing_pop <- testing %>%
full_join(state_pop, by = "state") %>%
select(state, statecode, population, `total tested`, `updated on`) %>%
rename(total_tested = `total tested`,
date = `updated on`) %>%
mutate(date = dmy(date))
# Forward fill total tested
testing_pop <- testing_pop %>%
group_by(state) %>%
arrange(date) %>%
fill(total_tested, population) %>%
fill(population, .direction = "up") %>%
ungroup %>%
mutate(total_tested = replace_na(total_tested, 0))
testing_pop %>% filter(state == "Odisha") %>% View
View(testing)
testing <- read_csv("https://api.covid19india.org/csv/latest/statewise_tested_numbers_data.csv") %>%
rename_all(tolower) %>%
mutate(state = ifelse(state == "Odisha", "Orissa", state),
statecode = ifelse(statecode == "OD", "OR", statecode))
state_pop <- read_csv("./rawdata/state_pop.csv") %>%
select(state, statecode, population) %>%
mutate(state = ifelse(state == "Odisha", "Orissa", state),
statecode = ifelse(statecode == "OD", "OR", statecode))
# Merging testing and population data
testing_pop <- testing %>%
full_join(state_pop, by = "state") %>%
select(state, statecode, population, `total tested`, `updated on`) %>%
rename(total_tested = `total tested`,
date = `updated on`) %>%
mutate(date = dmy(date))
# Forward fill total tested
testing_pop <- testing_pop %>%
group_by(state) %>%
arrange(date) %>%
fill(total_tested, population) %>%
fill(population, .direction = "up") %>%
ungroup %>%
mutate(total_tested = replace_na(total_tested, 0))
testing_pop %>% filter(state == "Odisha") %>% View
testing_pop %>% filter(state == "Orissa") %>% View
state_pop %>% filter(state == "Orissa") %>% View
testing %>% filter(state == "Orissa") %>% View
View(testing)
testing <- read_csv("https://api.covid19india.org/csv/latest/statewise_tested_numbers_data.csv") %>%
rename_all(tolower) %>%
mutate(state = ifelse(state == "Odisha", "Orissa", state))
testing %>% filter(state == "Orissa")
testing %>% filter(state == "Odisha")
testing <- read_csv("https://api.covid19india.org/csv/latest/statewise_tested_numbers_data.csv") %>%
rename_all(tolower) %>%
mutate(state = ifelse(state == "Odisha", "Orissa", state))
state_pop <- read_csv("./rawdata/state_pop.csv") %>%
select(state, statecode, population) %>%
mutate(state = ifelse(state == "Odisha", "Orissa", state),
statecode = ifelse(statecode == "OD", "OR", statecode))
# Merging testing and population data
testing_pop <- testing %>%
full_join(state_pop, by = "state") %>%
select(state, statecode, population, `total tested`, `updated on`) %>%
rename(total_tested = `total tested`,
date = `updated on`) %>%
mutate(date = dmy(date))
# Forward fill total tested
testing_pop <- testing_pop %>%
group_by(state) %>%
arrange(date) %>%
fill(total_tested, population) %>%
fill(population, .direction = "up") %>%
ungroup %>%
mutate(total_tested = replace_na(total_tested, 0))
View(testing_pop)
testing_pop %>% summarize(sum(is.na(total_tested)))
testing_pop %>% summarize(sum(is.na(population)))
testing_pop %>% fitler(is.na(population)) %>% View
testing_pop %>% filter(is.na(population)) %>% View
# Generating testing rates by state
library(tidyverse)
library(lubridate)
testing <- read_csv("https://api.covid19india.org/csv/latest/statewise_tested_numbers_data.csv") %>%
rename_all(tolower) %>%
mutate(state = ifelse(state == "Odisha", "Orissa", state))
state_pop <- read_csv("./rawdata/state_pop.csv") %>%
select(state, statecode, population) %>%
mutate(state = ifelse(state == "Odisha", "Orissa", state),
statecode = ifelse(statecode == "OD", "OR", statecode))
# Merging testing and population data
testing_pop <- testing %>%
full_join(state_pop, by = "state") %>%
select(state, statecode, population, `total tested`, `updated on`) %>%
rename(total_tested = `total tested`,
date = `updated on`) %>%
mutate(date = dmy(date))
# Forward fill total tested
testing_pop <- testing_pop %>%
group_by(state) %>%
arrange(date) %>%
fill(total_tested, population) %>%
fill(population, .direction = "up") %>%
ungroup %>%
mutate(total_tested = replace_na(total_tested, 0))
# generating testing rates
testing_pop <- testing_pop %>%
mutate(testing_rate = log(1 + total_tested/population))
# Outputting
testing_pop %>%
write_csv("./outdata/testing_rates_state.csv")
# Estiamting hierarchical model for Covid in India
covid <- read_csv("https://api.covid19india.org/csv/latest/state_wise_daily.csv")
testing_rates <- read_csv("./outdata/testing_rates_state.csv")
# We want to reshape the dataset to long for easy analysis.
covid <- covid %>%
pivot_longer(-c(Date, Status), names_to = "state", values_to = "value") %>%
rename_all(tolower)
# formatting date
covid <- covid %>%
mutate(date = dmy(date))
# calculating total number of cases per day
covid <- covid %>%
arrange(date) %>%
group_by(state, status) %>%
mutate(value_cumsum = cumsum(ifelse(is.na(value), 0, value)))
# specifying outcome variable
covid <- covid %>%
group_by(state, status) %>%
mutate(F5.value_cumsum = lead(value_cumsum, 5, order_by = date)) %>%
ungroup
# Merging with testing rates data
covid <- covid %>%
left_join(testing_rates, by.x = c("date", "state"),
by.y = c("date", "statecode"))
# Forward fill total tested
covid <- covid %>%
group_by(state) %>%
arrange(date) %>%
fill(total_tested, population, testing_rate) %>%
fill(population, .direction = "up") %>%
ungroup %>%
mutate(total_tested = replace_na(total_tested, 0))
View(covid)
covid %>% summarize(sum(is.na(total_tested)))
covid %>% summarize(sum(is.na(population)))
covid %>% filter(is.na(population)) %>% View
View(testing_rates)
testing_rates <- read_csv("./outdata/testing_rates_state.csv") %>%
rename(statename = state,
state = statecode)
View(testing_rates)
covid <- read_csv("https://api.covid19india.org/csv/latest/state_wise_daily.csv")
testing_rates <- read_csv("./outdata/testing_rates_state.csv") %>%
rename(statename = state,
state = statecode)
# We want to reshape the dataset to long for easy analysis.
covid <- covid %>%
pivot_longer(-c(Date, Status), names_to = "state", values_to = "value") %>%
rename_all(tolower)
# formatting date
covid <- covid %>%
mutate(date = dmy(date))
# calculating total number of cases per day
covid <- covid %>%
arrange(date) %>%
group_by(state, status) %>%
mutate(value_cumsum = cumsum(ifelse(is.na(value), 0, value)))
# specifying outcome variable
covid <- covid %>%
group_by(state, status) %>%
mutate(F5.value_cumsum = lead(value_cumsum, 5, order_by = date)) %>%
ungroup
# Merging with testing rates data
covid <- covid %>%
left_join(testing_rates, by = c("date", "state"))
View(covid)
covid %>% summarize(sum(complete.cases(population)))
covid %>% summarize(sum(complete.cases(total_tested)))
covid %>% summarize(sum(complete.cases(testing_rate)))
# Forward fill total tested
covid <- covid %>%
group_by(state) %>%
arrange(date) %>%
fill(total_tested, population, testing_rate) %>%
fill(population, .direction = "up") %>%
ungroup %>%
mutate(total_tested = replace_na(total_tested, 0))
covid %>% summarize(sum(complete.cases(testing_rate)))
covid %>% filter(is.na(testing_rate))
covid <- read_csv("https://api.covid19india.org/csv/latest/state_wise_daily.csv")
testing_rates <- read_csv("./outdata/testing_rates_state.csv") %>%
rename(statename = state,
state = statecode)
# We want to reshape the dataset to long for easy analysis.
covid <- covid %>%
pivot_longer(-c(Date, Status), names_to = "state", values_to = "value") %>%
rename_all(tolower)
# formatting date
covid <- covid %>%
mutate(date = dmy(date))
# calculating total number of cases per day
covid <- covid %>%
arrange(date) %>%
group_by(state, status) %>%
mutate(value_cumsum = cumsum(ifelse(is.na(value), 0, value)))
# specifying outcome variable
covid <- covid %>%
group_by(state, status) %>%
mutate(F5.value_cumsum = lead(value_cumsum, 5, order_by = date)) %>%
ungroup
# Merging with testing rates data
covid <- covid %>%
left_join(testing_rates, by = c("date", "state"))
# Forward fill total tested
covid <- covid %>%
group_by(state) %>%
arrange(date) %>%
fill(statename, .direction = "updown") %>%
fill(total_tested, population, testing_rate, statename) %>%
fill(population, statename, .direction = "up") %>%
ungroup %>%
mutate(total_tested = replace_na(total_tested, 0))
covid %>% filter(is.na(testing_rate))
covid %>% filter(is.na(testing_rate)) %>% View
covid %>% filter(is.na(testing_rate) & state == "AN") %>% View
View(testing_rates)
View(testing_rates[testing_rates$state == "AN",])
View(testing_rates[testing_rates$state == "AN",])
# some testing rates are still missing causing of no date overlaps
covid <- covid %>%
mutate(testing_rate = ifelse(is.na(testing_rate),
log(1 + total_tested/population),
testing_rate))
covid %>% summarize(sum(is.na(testing_rate)))
covid %>% filter(state != "TT" & state != "UT") %>% summarize(sum(is.na(testing_rate)))
covid %>% filter(state != "TT" & state != "UT") %>% filter(is.na(testing_rate)) %>% View
covid %>% filter(state != "TT" & state != "UT") %>% filter(is.na(testing_rate)) %>% gorup_by(state) %>% summarize(unique(state))
covid %>% filter(state != "TT" & state != "UT") %>% filter(is.na(testing_rate)) %>% group_by(state) %>% summarize(unique(state))
# Generating testing rates by state
library(tidyverse)
library(lubridate)
testing <- read_csv("https://api.covid19india.org/csv/latest/statewise_tested_numbers_data.csv") %>%
rename_all(tolower) %>%
mutate(state = ifelse(state == "Odisha", "Orissa", state))
state_pop <- read_csv("./rawdata/state_pop.csv") %>%
select(state, statecode, population) %>%
mutate(state = ifelse(state == "Odisha", "Orissa", state),
statecode = ifelse(statecode == "OD", "OR", statecode))
# Merging testing and population data
testing_pop <- testing %>%
full_join(state_pop, by = "state") %>%
select(state, statecode, population, `total tested`, `updated on`) %>%
rename(total_tested = `total tested`,
date = `updated on`) %>%
mutate(date = dmy(date))
# Forward fill total tested
testing_pop <- testing_pop %>%
group_by(state) %>%
arrange(date) %>%
fill(total_tested, population) %>%
fill(population, .direction = "up") %>%
ungroup %>%
mutate(total_tested = replace_na(total_tested, 0))
# generating testing rates
testing_pop <- testing_pop %>%
mutate(testing_rate = log(1 + total_tested/population))
# Outputting
testing_pop %>%
write_csv("./outdata/testing_rates_state.csv")
testing %>% names
testing %>% group_by(state) %>% summarize(unique)
testing %>% group_by(state) %>% summarize(unique(state))
testing %>% group_by(state) %>% summarize(unique(state)) %>% View
testing %>% filter(state == "Chattisgarh") %>% View
testing %>% filter(state == "Chhattisgarh") %>% View
testing <- read_csv("https://api.covid19india.org/csv/latest/statewise_tested_numbers_data.csv") %>%
rename_all(tolower) %>%
mutate(state = ifelse(state == "Odisha", "Orissa", state))
testing %>% summarize(length(unique(state)))
testing %>% group_by(state) %>% summarize()
testing %>% group_by(state) %>% summarize() %>% Viwe
testing %>% group_by(state) %>% summarize() %>% Viiew
testing %>% group_by(state) %>% summarize() %>% View
testing <- read_csv("https://api.covid19india.org/csv/latest/statewise_tested_numbers_data.csv") %>%
rename_all(tolower) %>%
mutate(state = ifelse(state == "Odisha", "Orissa", state))
state_pop <- read_csv("./rawdata/state_pop.csv") %>%
select(state, statecode, population) %>%
mutate(state = ifelse(state == "Odisha", "Orissa", state),
statecode = ifelse(statecode == "OD", "OR", statecode))
View(state_pop)
state_pop <- read_csv("./rawdata/state_pop.csv") %>%
select(state, statecode, population) %>%
mutate(state = ifelse(state == "Odisha", "Orissa", state),
statecode = ifelse(statecode == "OD", "OR", statecode)) %>%
drop_na(state)
View(state_pop)
# Merging testing and population data
testing_pop <- testing %>%
full_join(state_pop, by = "state") %>%
select(state, statecode, population, `total tested`, `updated on`) %>%
rename(total_tested = `total tested`,
date = `updated on`) %>%
mutate(date = dmy(date))
# Merging testing and population data
testing_pop <- testing %>%
left_join(state_pop, by = "state") %>%
select(state, statecode, population, `total tested`, `updated on`) %>%
rename(total_tested = `total tested`,
date = `updated on`) %>%
mutate(date = dmy(date))
View(testing_pop)
# Forward fill total tested
testing_pop <- testing_pop %>%
group_by(state) %>%
arrange(date) %>%
fill(total_tested, population) %>%
fill(population, .direction = "up") %>%
ungroup %>%
mutate(total_tested = replace_na(total_tested, 0))
testing_pop %>% filter(is.na(population)) %>% View
# generating testing rates
testing_pop <- testing_pop %>%
mutate(testing_rate = log(1 + total_tested/population))
log(1)
log(0)
# Generating testing rates by state
library(tidyverse)
library(lubridate)
testing <- read_csv("https://api.covid19india.org/csv/latest/statewise_tested_numbers_data.csv") %>%
rename_all(tolower) %>%
mutate(state = ifelse(state == "Odisha", "Orissa", state))
state_pop <- read_csv("./rawdata/state_pop.csv") %>%
select(state, statecode, population) %>%
mutate(state = ifelse(state == "Odisha", "Orissa", state),
statecode = ifelse(statecode == "OD", "OR", statecode)) %>%
drop_na(state)
# Merging testing and population data
testing_pop <- testing %>%
left_join(state_pop, by = "state") %>%
select(state, statecode, population, `total tested`, `updated on`) %>%
rename(total_tested = `total tested`,
date = `updated on`) %>%
mutate(date = dmy(date))
# Forward fill total tested
testing_pop <- testing_pop %>%
group_by(state) %>%
arrange(date) %>%
fill(total_tested, population) %>%
fill(population, .direction = "up") %>%
ungroup %>%
mutate(total_tested = replace_na(total_tested, 0))
# generating testing rates
testing_pop <- testing_pop %>%
mutate(testing_rate = 1 + log(1 + total_tested/population))
# Outputting
testing_pop %>%
write_csv("./outdata/testing_rates_state.csv")
covid <- read_csv("https://api.covid19india.org/csv/latest/state_wise_daily.csv")
testing_rates <- read_csv("./outdata/testing_rates_state.csv") %>%
rename(statename = state,
state = statecode)
# We want to reshape the dataset to long for easy analysis.
covid <- covid %>%
pivot_longer(-c(Date, Status), names_to = "state", values_to = "value") %>%
rename_all(tolower)
# formatting date
covid <- covid %>%
mutate(date = dmy(date))
# calculating total number of cases per day
covid <- covid %>%
arrange(date) %>%
group_by(state, status) %>%
mutate(value_cumsum = cumsum(ifelse(is.na(value), 0, value)))
# specifying outcome variable
covid <- covid %>%
group_by(state, status) %>%
mutate(F5.value_cumsum = lead(value_cumsum, 5, order_by = date)) %>%
ungroup
# Merging with testing rates data
covid <- covid %>%
left_join(testing_rates, by = c("date", "state"))
# Forward fill total tested
covid <- covid %>%
group_by(state) %>%
arrange(date) %>%
fill(statename, .direction = "updown") %>%
fill(total_tested, population, testing_rate, statename) %>%
fill(population, statename, .direction = "up") %>%
ungroup %>%
mutate(total_tested = replace_na(total_tested, 0))
# some testing rates are still missing causing of no date overlaps
covid <- covid %>%
mutate(testing_rate = ifelse(is.na(testing_rate),
1 + log(1 + total_tested/population),
testing_rate))
covid %>% filter(is.na(testing_rate)) %>% View
covid %>% filter(is.na(testing_rate)) %>% group_by(state) %>% summarize() %>% View
# remove India total and keep only confirmed cases
covid_confirmed <- covid %>%
filter(status == "Confirmed" & state != "TT" & state != "UT")
# Deflate confirmation numbers by testing rates
covid_confirmed <- covid_confirmed %>%
mutate(value_cumsum_defl = value_cumsum/testing_rate)
covid_confirmed %>% filter(is.na(testing_rate)) %>% group_by(state) %>% summarize() %>% View
View(covid_confirmed)
# Deflate confirmation numbers by testing rates
covid_confirmed <- covid_confirmed %>%
mutate(value_cumsum_defl = value_cumsum/testing_rate,
F5.value_cumsum_defl = F5.value_cumsum/testing_rate)
covid_confirmed %>%
filter(complete.cases(value_cumsum) & is.na(value_cumsum_defl))
covid_confirmed %>%
filter(complete.cases(value_cumsum) & is.na(value_cumsum_defl)) %>% View
# Deflate confirmation numbers by testing rates
covid_confirmed <- covid_confirmed %>%
mutate(value_cumsum_defl = ifelse(value_cumsum == 0 & testing_rate == 0,
0,
value_cumsum/testing_rate),
F5.value_cumsum_defl = ifelse(F5.value_cumsum == 0 & testing_rate == 0,
0,
F5.value_cumsum/testing_rate))
covid_confirmed %>%
filter(complete.cases(value_cumsum) & is.na(value_cumsum_defl)) %>% View
covid_confirmed %>%
filter(complete.cases(value_cumsum) & is.na(value_cumsum_defl)) %>%
group_by(state) %>% summarize() %>% View
# == Specifying parameter values for stan == #
# remove obs with NA
covid_confirmed <- covid_confirmed %>%
drop_na(F5.value_cumsum, F5.value_cumsum)
# Make state categorical
covid_confirmed <- covid_confirmed %>%
mutate(state = as.factor(state))
# Parameters to pass into stan
N <- nrow(covid_confirmed)
J <- length(unique(covid_confirmed$state))
K <- 2 # r coefficient and intercept
id <- c(unclass(covid_confirmed$state))
X <- cbind(rep(1, nrow(covid_confirmed)),covid_confirmed$value_cumsum)
y <- covid_confirmed$F5.value_cumsum
## Running Stan
m_hier<-stan(file="./simple_hier/covid_model.stan",
data=list(N=N,J=J,K=K,id=id,X=X,y=y))
# == Cleaning and Specifying parameter values for stan == #
# remove obs with NA
covid_confirmed <- covid_confirmed %>%
drop_na(F5.value_cumsum, F5.value_cumsum)
# Make state categorical
covid_confirmed <- covid_confirmed %>%
mutate(state = as.factor(state))
# Parameters to pass into stan
N <- nrow(covid_confirmed)
J <- length(unique(covid_confirmed$state))
K <- 2 # r coefficient and intercept
id <- c(unclass(covid_confirmed$state))
X <- cbind(rep(1, nrow(covid_confirmed)),covid_confirmed$value_cumsum)
y <- covid_confirmed$F5.value_cumsum
## Running Stan
m_hier<-stan(file="./heir_testing/covid_model.stan",
data=list(N=N,J=J,K=K,id=id,X=X,y=y))
# == Storing Results == #
## Storing Coefficients with Each State
mcmc_hier<-extract(m_hier)
ind_coeff<-apply(mcmc_hier$beta,c(2,3),quantile,probs=c(0.025,0.5,0.975))
# state levels
df_ind_coeff<-tibble(LI=ind_coeff[1,,2],
Median=ind_coeff[2,,2],
HI=ind_coeff[3,,2])
df_ind_coeff$state <- rep(unique(levels(covid_confirmed$state)))
# population level
pop_extract <- apply(mcmc_hier$r,2,quantile,probs=c(0.025,0.5,0.975))
pop_lvl<-tibble(LI = pop_extract[1, 2],
Median=pop_extract[2, 2],
HI = pop_extract[3, 2],
state = "Population")
# Appending
coeff_out <- bind_rows(df_ind_coeff, pop_lvl)
# Saving data
coeff_out %>%
write_csv("./heir_testing/coeff.csv")
coeffs <- read_csv("./heir_testing/coeff.csv")
df_ind_coeff <- coeffs %>%
filter(state != "Population")
pop_coeff <- coeffs %>%
filter(state == "Population")
df_ind_coeff <- df_ind_coeff %>%
filter(abs(HI - LI) < 0.5)
# reording based on R0 size
df_ind_coeff$state_ro <- transform(df_ind_coeff$state,
state_ro=reorder(df_ind_coeff$state,
-df_ind_coeff$Median))$state_ro
# Plotting Rs
df_ind_coeff %>%
arrange(Median) %>%
ggplot(aes(x=state_ro,y=Median))+
geom_point() +
geom_linerange(aes(ymin=LI,ymax=HI)) +
geom_hline(data=pop_coeff,
aes(yintercept=Median),
color="blue",linetype="dashed") +
annotate("text", y=pop_coeff$Median - 0.03, x = 2, label= "India R0",
color = "blue", angle = 90) +
coord_flip() +
labs(title = "R0 by State",
y = "Estimated R0",
x = "State",
caption = "Source: https://api.covid19india.org/") +
theme(plot.caption = element_text(color = "grey",
face = "italic",
hjust = 0))
