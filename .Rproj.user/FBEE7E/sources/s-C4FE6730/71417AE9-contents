---
title: " Estimating $R$ by State for India"
author: "Hariharan Jayashankar"
date: "23/04/2020"
output: html_document
---

# Introduction and the Model

We want to estimate $R$. I follow a simple linear hierarchical model here. For a given state,
we guess that the total number of cases $x$ follows this process:

$$x_{t+5} = Rx_t + \epsilon_t$$

This is inspired from https://github.com/arnavs/ECON-326-Project. The time difference of 5 days comes from the median incubation period of the virus which seems to be around 5 days.

A simple linear regression along a time series will also be able to estimate this. But will likely
have large confidence intervals. Also we want to incorporate prior knowledge of the parameter $R$ into our data. Zhang et al ([link](https://www.ncbi.nlm.nih.gov/pubmed/32097725)) estimate an $R$ of 2.28 for covid-19 from the Diamond Princess.

Because of this we use a bayesian hierarchical model to get estimates of $R$ by states.


## The Model

Specifying the model a bit more thoroughly, we can specify the evolution of total number of cases for each state $j$  in time period $t$ by

$$\mu_{t+5,j} = R_{j}\mu_{t,j} + \beta_0$$

Where 
$$R_{0,j} \sim N(r_j, \sigma_{R,j})$$

$$r_j \sim N(2.28, 2)$$ 


$$\sigma_{R,j} \sim cauchy(0, 2.5)$$

And our final outcome $y_{t,j} \sim N(\mu_{t,j}, \sigma)$. $\sigma \sim gamma(2,0.1)$.

As of now, parameters for the priors have been chosen a bit at random except for $r_j$ whos mean is chosen according to [Zhang et al](https://www.ncbi.nlm.nih.gov/pubmed/32097725). The standard deviations of the parameters are taken such that we have fairly diffuse priors anyway. Changing these don't seem to change the estimates much.

# Estimating the Model

Data wrangling is done by ./code/build/build_simple_heir_data.R. Estimation is done using
./code/analysis/simple_heir_estimation.R.

estimation.R makes use of covid_model.stan to estimate the model specified above. The estimates
are then stored in "./outdata/simple_heir_coeff.csv". That is what is read below to produce a plot
of some of the estimates.

## Exploring the Raw Data

```{r message=FALSE, warning=FALSE, paged.print=FALSE}

library(tidyverse)
theme_set(theme_light())
library(lubridate)
library(kableExtra)

```


Lets take a look at the rawdata.

```{r message=FALSE, warning=FALSE}
covid <- read_csv("./outdata/simple_heir_data.csv")
```

Daily counts refers to the number of new cases on a given day. The cumulative sum simply takes the
sum of these for each state till a given day. So cumulative sum for a given date will tell you
the total number of cases we had in a state on that date.

```{r}
covid %>% 
  group_by(status) %>%
  summarize(
    "Mean" = mean(value, na.rm = T),
    "Median" = median(value, na.rm = T),
    "SD" = sd(value, na.rm = T),
    "Min" = min(value, na.rm = T),
    "Max" = max(value, na.rm = T),
    "No. of Obs" = n()
  ) %>%
  kable(align = "c", caption = "Daily Count") %>%
  kable_styling()
```


```{r}
covid %>% 
  group_by(status) %>%
  summarize(
    "Mean" = mean(value_cumsum, na.rm = T),
    "Median" = median(value_cumsum, na.rm = T),
    "SD" = sd(value_cumsum, na.rm = T),
    "Min" = min(value_cumsum, na.rm = T),
    "Max" = max(value_cumsum, na.rm = T),
    "No. of Obs" = n()
  ) %>% 
  kable(align = "c", caption = "Cumulative Daily Count") %>%
  kable_styling()
```


```{r}
covid %>%
    filter(status == "Confirmed" &
               state %in% c("MH", "GJ", "KL")) %>%
    ggplot() +
    geom_line(aes(date, value_cumsum, color = state)) +
    labs(title = "Time Series Cumulative Sum by State",
         x = "",
         y = "Total Confirmed",
         color = "State",
         caption = "Source: https://api.covid19india.org/") +
    theme(plot.caption = element_text(color = "grey", face = "italic", 
                                      hjust = 0))
```

Its easier to see these kind of exponential plots when we log the Y variable. Here is the plot but with the Y axis showing Log of cumulative confirmed cases.

```{r}

covid %>%
    filter(status == "Confirmed" &
               state %in% c("MH", "GJ", "KL")) %>%
    ggplot() +
    geom_line(aes(date, log(value_cumsum), color = state)) +
    labs(title = "Time Series Log of Cumulative Sum by State",
         x = "",
         y = "Log of Total Confirmed",
         color = "State",
         caption = "Source: https://api.covid19india.org/") +
    theme(plot.caption = element_text(color = "grey", face = "italic", 
                                      hjust = 0))
```

It's clearer in the second plot that Gujarat is quickly "catching up" to Maharashtra in terms of the total number of cases. The effective reproduction number will essentially be an estimate of the slope of these time series graphs.


```{r message=FALSE, warning=FALSE}
coeffs <- read_csv("./outdata/simple_heir_coeff.csv")
```

```{r}
df_ind_coeff <- coeffs %>%
    filter(state != "Population")

pop_coeff <- coeffs %>%
    filter(state == "Population")

df_ind_coeff <- df_ind_coeff %>%
    filter(abs(HI - LI) < 0.5)

# reording based on R0 size
df_ind_coeff$state_ro <- transform(df_ind_coeff$state, 
                                   state_ro=reorder(df_ind_coeff$state,
                                                    -df_ind_coeff$Median))$state_ro

# Plotting Rs
df_ind_coeff %>%
    arrange(Median) %>%
    ggplot(aes(x=state_ro,y=Median))+
    geom_point() +
    geom_linerange(aes(ymin=LI,ymax=HI)) +
    geom_hline(data=pop_coeff,
                 aes(yintercept=Median),
                 color="blue",linetype="dashed") +
    annotate("text", y=pop_coeff$Median - 0.03, x = 2, label= "India R0",
             color = "blue", angle = 90) + 
    coord_flip() +
      labs(title = "Covid-19 Effective Reproduction Number by State",
           y = "Estimated R",
           x = "State",
           caption = "Source: https://api.covid19india.org/") +
    theme(plot.caption = element_text(color = "grey", 
                                      face = "italic", 
                                      hjust = 0))
```

```{r echo=FALSE}
ggsave("./product/simple_heir_r_bysate.png",
       height = 6, width = 9)
```

The estimates strengthen the intuition we got from the log plot. Gujarat seems to have the highest
R. 


